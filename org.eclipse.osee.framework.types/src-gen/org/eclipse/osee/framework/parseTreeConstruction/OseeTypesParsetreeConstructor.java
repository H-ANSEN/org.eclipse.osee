/*
* generated by Xtext
*/
package org.eclipse.osee.framework.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.osee.framework.services.OseeTypesGrammarAccess;

import com.google.inject.Inject;

public class OseeTypesParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private OseeTypesGrammarAccess grammarAccess;
		
	public OseeTypesGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OseeTypeModel_Group(this, this, 0, inst);
			case 1: return new Import_Group(this, this, 1, inst);
			case 2: return new OseeType_Alternatives(this, this, 2, inst);
			case 3: return new ArtifactType_Group(this, this, 3, inst);
			case 4: return new AttributeTypeRef_Group(this, this, 4, inst);
			case 5: return new AttributeType_Group(this, this, 5, inst);
			case 6: return new OseeEnumType_Group(this, this, 6, inst);
			case 7: return new OseeEnumEntry_Group(this, this, 7, inst);
			case 8: return new RelationType_Group(this, this, 8, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule OseeTypeModel ****************
 *
 * OseeTypeModel:
 *   imports+=Import* types+=OseeType*;
 *
 **/

// imports+=Import* types+=OseeType*
protected class OseeTypeModel_Group extends GroupToken {
	
	public OseeTypeModel_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOseeTypeModelAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OseeTypeModel_TypesAssignment_1(parent, this, 0, inst);
			case 1: return new OseeTypeModel_ImportsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOseeTypeModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// imports+=Import*
protected class OseeTypeModel_ImportsAssignment_0 extends AssignmentToken  {
	
	public OseeTypeModel_ImportsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOseeTypeModelAccess().getImportsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("imports",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOseeTypeModelAccess().getImportsImportParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OseeTypeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// types+=OseeType*
protected class OseeTypeModel_TypesAssignment_1 extends AssignmentToken  {
	
	public OseeTypeModel_TypesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOseeTypeModelAccess().getTypesAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OseeType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("types",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("types");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOseeTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOseeTypeModelAccess().getTypesOseeTypeParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OseeTypeModel_TypesAssignment_1(parent, next, actIndex, consumed);
			case 1: return new OseeTypeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}


/************ end Rule OseeTypeModel ****************/


/************ begin Rule Import ****************
 *
 * Import:
 *   "import" importURI=STRING;
 *
 **/

// "import" importURI=STRING
protected class Import_Group extends GroupToken {
	
	public Import_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportURIAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "import"
protected class Import_ImportKeyword_0 extends KeywordToken  {
	
	public Import_ImportKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getImportKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// importURI=STRING
protected class Import_ImportURIAssignment_1 extends AssignmentToken  {
	
	public Import_ImportURIAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getImportURIAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("importURI",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("importURI");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Import ****************/




/************ begin Rule OseeType ****************
 *
 * OseeType:
 *   ArtifactType|RelationType|AttributeType|OseeEnumType;
 *
 **/

// ArtifactType|RelationType|AttributeType|OseeEnumType
protected class OseeType_Alternatives extends AlternativesToken {

	public OseeType_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getOseeTypeAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OseeType_ArtifactTypeParserRuleCall_0(parent, this, 0, inst);
			case 1: return new OseeType_RelationTypeParserRuleCall_1(parent, this, 1, inst);
			case 2: return new OseeType_AttributeTypeParserRuleCall_2(parent, this, 2, inst);
			case 3: return new OseeType_OseeEnumTypeParserRuleCall_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOseeTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ArtifactType
protected class OseeType_ArtifactTypeParserRuleCall_0 extends RuleCallToken {
	
	public OseeType_ArtifactTypeParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getOseeTypeAccess().getArtifactTypeParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArtifactType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ArtifactType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getArtifactTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// RelationType
protected class OseeType_RelationTypeParserRuleCall_1 extends RuleCallToken {
	
	public OseeType_RelationTypeParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getOseeTypeAccess().getRelationTypeParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RelationType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRelationTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// AttributeType
protected class OseeType_AttributeTypeParserRuleCall_2 extends RuleCallToken {
	
	public OseeType_AttributeTypeParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getOseeTypeAccess().getAttributeTypeParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AttributeType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAttributeTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// OseeEnumType
protected class OseeType_OseeEnumTypeParserRuleCall_3 extends RuleCallToken {
	
	public OseeType_OseeEnumTypeParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getOseeTypeAccess().getOseeEnumTypeParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OseeEnumType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(OseeEnumType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getOseeEnumTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule OseeType ****************/


/************ begin Rule ArtifactType ****************
 *
 * ArtifactType:
 *   "abstract"? "artifactType" name=QUALIFIED_NAME ("extends" superArtifactType=[
 *   ArtifactType])? "{" validAttributeTypes+=AttributeTypeRef* "}";
 *
 **/

// "abstract"? "artifactType" name=QUALIFIED_NAME ("extends" superArtifactType=[
// ArtifactType])? "{" validAttributeTypes+=AttributeTypeRef* "}"
protected class ArtifactType_Group extends GroupToken {
	
	public ArtifactType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getArtifactTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArtifactType_RightCurlyBracketKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getArtifactTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "artifactType"
protected class ArtifactType_ArtifactTypeKeyword_1 extends KeywordToken  {
	
	public ArtifactType_ArtifactTypeKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getArtifactTypeAccess().getArtifactTypeKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=QUALIFIED_NAME
protected class ArtifactType_NameAssignment_2 extends AssignmentToken  {
	
	public ArtifactType_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getArtifactTypeAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArtifactType_ArtifactTypeKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getArtifactTypeAccess().getNameQUALIFIED_NAMEParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("extends" superArtifactType=[ArtifactType])?
protected class ArtifactType_Group_3 extends GroupToken {
	
	public ArtifactType_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getArtifactTypeAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArtifactType_SuperArtifactTypeAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class ArtifactType_ExtendsKeyword_3_0 extends KeywordToken  {
	
	public ArtifactType_ExtendsKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getArtifactTypeAccess().getExtendsKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArtifactType_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// superArtifactType=[ArtifactType]
protected class ArtifactType_SuperArtifactTypeAssignment_3_1 extends AssignmentToken  {
	
	public ArtifactType_SuperArtifactTypeAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getArtifactTypeAccess().getSuperArtifactTypeAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArtifactType_ExtendsKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("superArtifactType",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("superArtifactType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArtifactTypeAccess().getSuperArtifactTypeArtifactTypeCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getArtifactTypeAccess().getSuperArtifactTypeArtifactTypeCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "{"
protected class ArtifactType_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public ArtifactType_LeftCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getArtifactTypeAccess().getLeftCurlyBracketKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArtifactType_Group_3(parent, this, 0, inst);
			case 1: return new ArtifactType_NameAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// validAttributeTypes+=AttributeTypeRef*
protected class ArtifactType_ValidAttributeTypesAssignment_5 extends AssignmentToken  {
	
	public ArtifactType_ValidAttributeTypesAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getArtifactTypeAccess().getValidAttributeTypesAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeTypeRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("validAttributeTypes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("validAttributeTypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttributeTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getArtifactTypeAccess().getValidAttributeTypesAttributeTypeRefParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ArtifactType_ValidAttributeTypesAssignment_5(parent, next, actIndex, consumed);
			case 1: return new ArtifactType_LeftCurlyBracketKeyword_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ArtifactType_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public ArtifactType_RightCurlyBracketKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getArtifactTypeAccess().getRightCurlyBracketKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArtifactType_ValidAttributeTypesAssignment_5(parent, this, 0, inst);
			case 1: return new ArtifactType_LeftCurlyBracketKeyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ArtifactType ****************/


/************ begin Rule AttributeTypeRef ****************
 *
 * AttributeTypeRef:
 *   "attribute" validAttributeType=[AttributeType];
 *
 **/

// "attribute" validAttributeType=[AttributeType]
protected class AttributeTypeRef_Group extends GroupToken {
	
	public AttributeTypeRef_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAttributeTypeRefAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeTypeRef_ValidAttributeTypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAttributeTypeRefRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "attribute"
protected class AttributeTypeRef_AttributeKeyword_0 extends KeywordToken  {
	
	public AttributeTypeRef_AttributeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeTypeRefAccess().getAttributeKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// validAttributeType=[AttributeType]
protected class AttributeTypeRef_ValidAttributeTypeAssignment_1 extends AssignmentToken  {
	
	public AttributeTypeRef_ValidAttributeTypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeTypeRefAccess().getValidAttributeTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeTypeRef_AttributeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("validAttributeType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("validAttributeType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttributeTypeRefAccess().getValidAttributeTypeAttributeTypeCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAttributeTypeRefAccess().getValidAttributeTypeAttributeTypeCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule AttributeTypeRef ****************/


/************ begin Rule AttributeType ****************
 *
 * AttributeType:
 *   "attributeType" name=QUALIFIED_NAME ("extends" baseAttributeType=AttributeBaseType)
 *   "{" "dataProvider" dataProvider=( "DefaultAttributeDataProvider" |
 *   "UriAttributeDataProvider" | "MappedAttributeDataProvider" | QUALIFIED_NAME ) "min" min
 *   =DIGITS "max" max=( DIGITS | "unlimited" ) ("taggerId" taggerId=(
 *   "DefaultAttributeTaggerProvider" | QUALIFIED_NAME ))? ("enumType" enumType=[
 *   OseeEnumType])? ("description" description=STRING)? ("defaultValue" defaultValue=
 *   STRING)? ("fileExtension" fileExtension=STRING)? "}";
 *
 **/

// "attributeType" name=QUALIFIED_NAME ("extends" baseAttributeType=AttributeBaseType)
// "{" "dataProvider" dataProvider=( "DefaultAttributeDataProvider" |
// "UriAttributeDataProvider" | "MappedAttributeDataProvider" | QUALIFIED_NAME ) "min" min
// =DIGITS "max" max=( DIGITS | "unlimited" ) ("taggerId" taggerId=(
// "DefaultAttributeTaggerProvider" | QUALIFIED_NAME ))? ("enumType" enumType=[
// OseeEnumType])? ("description" description=STRING)? ("defaultValue" defaultValue=
// STRING)? ("fileExtension" fileExtension=STRING)? "}"
protected class AttributeType_Group extends GroupToken {
	
	public AttributeType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_RightCurlyBracketKeyword_15(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAttributeTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "attributeType"
protected class AttributeType_AttributeTypeKeyword_0 extends KeywordToken  {
	
	public AttributeType_AttributeTypeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getAttributeTypeKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=QUALIFIED_NAME
protected class AttributeType_NameAssignment_1 extends AssignmentToken  {
	
	public AttributeType_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_AttributeTypeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAttributeTypeAccess().getNameQUALIFIED_NAMEParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "extends" baseAttributeType=AttributeBaseType
protected class AttributeType_Group_2 extends GroupToken {
	
	public AttributeType_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_BaseAttributeTypeAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class AttributeType_ExtendsKeyword_2_0 extends KeywordToken  {
	
	public AttributeType_ExtendsKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getExtendsKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// baseAttributeType=AttributeBaseType
protected class AttributeType_BaseAttributeTypeAssignment_2_1 extends AssignmentToken  {
	
	public AttributeType_BaseAttributeTypeAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getBaseAttributeTypeAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_ExtendsKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("baseAttributeType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("baseAttributeType");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAttributeTypeAccess().getBaseAttributeTypeAttributeBaseTypeParserRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// "{"
protected class AttributeType_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public AttributeType_LeftCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getLeftCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_Group_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "dataProvider"
protected class AttributeType_DataProviderKeyword_4 extends KeywordToken  {
	
	public AttributeType_DataProviderKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getDataProviderKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_LeftCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// dataProvider=( "DefaultAttributeDataProvider" | "UriAttributeDataProvider" |
// "MappedAttributeDataProvider" | QUALIFIED_NAME )
protected class AttributeType_DataProviderAssignment_5 extends AssignmentToken  {
	
	public AttributeType_DataProviderAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getDataProviderAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_DataProviderKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataProvider",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataProvider");
		if("DefaultAttributeDataProvider".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAttributeTypeAccess().getDataProviderDefaultAttributeDataProviderKeyword_5_0_0();
			return obj;
		}
		if("UriAttributeDataProvider".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAttributeTypeAccess().getDataProviderUriAttributeDataProviderKeyword_5_0_1();
			return obj;
		}
		if("MappedAttributeDataProvider".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAttributeTypeAccess().getDataProviderMappedAttributeDataProviderKeyword_5_0_2();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAttributeTypeAccess().getDataProviderQUALIFIED_NAMEParserRuleCall_5_0_3();
			return obj;
		}
		return null;
	}

}

// "min"
protected class AttributeType_MinKeyword_6 extends KeywordToken  {
	
	public AttributeType_MinKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getMinKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_DataProviderAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// min=DIGITS
protected class AttributeType_MinAssignment_7 extends AssignmentToken  {
	
	public AttributeType_MinAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getMinAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_MinKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("min",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("min");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAttributeTypeAccess().getMinDIGITSParserRuleCall_7_0();
			return obj;
		}
		return null;
	}

}

// "max"
protected class AttributeType_MaxKeyword_8 extends KeywordToken  {
	
	public AttributeType_MaxKeyword_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getMaxKeyword_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_MinAssignment_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// max=( DIGITS | "unlimited" )
protected class AttributeType_MaxAssignment_9 extends AssignmentToken  {
	
	public AttributeType_MaxAssignment_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getMaxAssignment_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_MaxKeyword_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("max",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("max");
		if("unlimited".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAttributeTypeAccess().getMaxUnlimitedKeyword_9_0_1();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAttributeTypeAccess().getMaxDIGITSParserRuleCall_9_0_0();
			return obj;
		}
		return null;
	}

}

// ("taggerId" taggerId=( "DefaultAttributeTaggerProvider" | QUALIFIED_NAME ))?
protected class AttributeType_Group_10 extends GroupToken {
	
	public AttributeType_Group_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getGroup_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_TaggerIdAssignment_10_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "taggerId"
protected class AttributeType_TaggerIdKeyword_10_0 extends KeywordToken  {
	
	public AttributeType_TaggerIdKeyword_10_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getTaggerIdKeyword_10_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_MaxAssignment_9(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// taggerId=( "DefaultAttributeTaggerProvider" | QUALIFIED_NAME )
protected class AttributeType_TaggerIdAssignment_10_1 extends AssignmentToken  {
	
	public AttributeType_TaggerIdAssignment_10_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getTaggerIdAssignment_10_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_TaggerIdKeyword_10_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("taggerId",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("taggerId");
		if("DefaultAttributeTaggerProvider".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAttributeTypeAccess().getTaggerIdDefaultAttributeTaggerProviderKeyword_10_1_0_0();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAttributeTypeAccess().getTaggerIdQUALIFIED_NAMEParserRuleCall_10_1_0_1();
			return obj;
		}
		return null;
	}

}


// ("enumType" enumType=[OseeEnumType])?
protected class AttributeType_Group_11 extends GroupToken {
	
	public AttributeType_Group_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getGroup_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_EnumTypeAssignment_11_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "enumType"
protected class AttributeType_EnumTypeKeyword_11_0 extends KeywordToken  {
	
	public AttributeType_EnumTypeKeyword_11_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getEnumTypeKeyword_11_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_Group_10(parent, this, 0, inst);
			case 1: return new AttributeType_MaxAssignment_9(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// enumType=[OseeEnumType]
protected class AttributeType_EnumTypeAssignment_11_1 extends AssignmentToken  {
	
	public AttributeType_EnumTypeAssignment_11_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getEnumTypeAssignment_11_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_EnumTypeKeyword_11_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("enumType",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("enumType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttributeTypeAccess().getEnumTypeOseeEnumTypeCrossReference_11_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAttributeTypeAccess().getEnumTypeOseeEnumTypeCrossReference_11_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// ("description" description=STRING)?
protected class AttributeType_Group_12 extends GroupToken {
	
	public AttributeType_Group_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getGroup_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_DescriptionAssignment_12_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "description"
protected class AttributeType_DescriptionKeyword_12_0 extends KeywordToken  {
	
	public AttributeType_DescriptionKeyword_12_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getDescriptionKeyword_12_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_Group_11(parent, this, 0, inst);
			case 1: return new AttributeType_Group_10(parent, this, 1, inst);
			case 2: return new AttributeType_MaxAssignment_9(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// description=STRING
protected class AttributeType_DescriptionAssignment_12_1 extends AssignmentToken  {
	
	public AttributeType_DescriptionAssignment_12_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getDescriptionAssignment_12_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_DescriptionKeyword_12_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttributeTypeAccess().getDescriptionSTRINGTerminalRuleCall_12_1_0();
			return obj;
		}
		return null;
	}

}


// ("defaultValue" defaultValue=STRING)?
protected class AttributeType_Group_13 extends GroupToken {
	
	public AttributeType_Group_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getGroup_13();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_DefaultValueAssignment_13_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "defaultValue"
protected class AttributeType_DefaultValueKeyword_13_0 extends KeywordToken  {
	
	public AttributeType_DefaultValueKeyword_13_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getDefaultValueKeyword_13_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_Group_12(parent, this, 0, inst);
			case 1: return new AttributeType_Group_11(parent, this, 1, inst);
			case 2: return new AttributeType_Group_10(parent, this, 2, inst);
			case 3: return new AttributeType_MaxAssignment_9(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// defaultValue=STRING
protected class AttributeType_DefaultValueAssignment_13_1 extends AssignmentToken  {
	
	public AttributeType_DefaultValueAssignment_13_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getDefaultValueAssignment_13_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_DefaultValueKeyword_13_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("defaultValue",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("defaultValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttributeTypeAccess().getDefaultValueSTRINGTerminalRuleCall_13_1_0();
			return obj;
		}
		return null;
	}

}


// ("fileExtension" fileExtension=STRING)?
protected class AttributeType_Group_14 extends GroupToken {
	
	public AttributeType_Group_14(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getGroup_14();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_FileExtensionAssignment_14_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "fileExtension"
protected class AttributeType_FileExtensionKeyword_14_0 extends KeywordToken  {
	
	public AttributeType_FileExtensionKeyword_14_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getFileExtensionKeyword_14_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_Group_13(parent, this, 0, inst);
			case 1: return new AttributeType_Group_12(parent, this, 1, inst);
			case 2: return new AttributeType_Group_11(parent, this, 2, inst);
			case 3: return new AttributeType_Group_10(parent, this, 3, inst);
			case 4: return new AttributeType_MaxAssignment_9(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
}

// fileExtension=STRING
protected class AttributeType_FileExtensionAssignment_14_1 extends AssignmentToken  {
	
	public AttributeType_FileExtensionAssignment_14_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getFileExtensionAssignment_14_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_FileExtensionKeyword_14_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("fileExtension",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("fileExtension");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttributeTypeAccess().getFileExtensionSTRINGTerminalRuleCall_14_1_0();
			return obj;
		}
		return null;
	}

}


// "}"
protected class AttributeType_RightCurlyBracketKeyword_15 extends KeywordToken  {
	
	public AttributeType_RightCurlyBracketKeyword_15(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getRightCurlyBracketKeyword_15();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_Group_14(parent, this, 0, inst);
			case 1: return new AttributeType_Group_13(parent, this, 1, inst);
			case 2: return new AttributeType_Group_12(parent, this, 2, inst);
			case 3: return new AttributeType_Group_11(parent, this, 3, inst);
			case 4: return new AttributeType_Group_10(parent, this, 4, inst);
			case 5: return new AttributeType_MaxAssignment_9(parent, this, 5, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule AttributeType ****************/



/************ begin Rule OseeEnumType ****************
 *
 * OseeEnumType:
 *   "oseeEnumType" name=QUALIFIED_NAME "{" enumEntries+=OseeEnumEntry* "}";
 *
 **/

// "oseeEnumType" name=QUALIFIED_NAME "{" enumEntries+=OseeEnumEntry* "}"
protected class OseeEnumType_Group extends GroupToken {
	
	public OseeEnumType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOseeEnumTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OseeEnumType_RightCurlyBracketKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOseeEnumTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "oseeEnumType"
protected class OseeEnumType_OseeEnumTypeKeyword_0 extends KeywordToken  {
	
	public OseeEnumType_OseeEnumTypeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOseeEnumTypeAccess().getOseeEnumTypeKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=QUALIFIED_NAME
protected class OseeEnumType_NameAssignment_1 extends AssignmentToken  {
	
	public OseeEnumType_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOseeEnumTypeAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OseeEnumType_OseeEnumTypeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getOseeEnumTypeAccess().getNameQUALIFIED_NAMEParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class OseeEnumType_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public OseeEnumType_LeftCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOseeEnumTypeAccess().getLeftCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OseeEnumType_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// enumEntries+=OseeEnumEntry*
protected class OseeEnumType_EnumEntriesAssignment_3 extends AssignmentToken  {
	
	public OseeEnumType_EnumEntriesAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOseeEnumTypeAccess().getEnumEntriesAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OseeEnumEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("enumEntries",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("enumEntries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOseeEnumEntryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOseeEnumTypeAccess().getEnumEntriesOseeEnumEntryParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OseeEnumType_EnumEntriesAssignment_3(parent, next, actIndex, consumed);
			case 1: return new OseeEnumType_LeftCurlyBracketKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class OseeEnumType_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public OseeEnumType_RightCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOseeEnumTypeAccess().getRightCurlyBracketKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OseeEnumType_EnumEntriesAssignment_3(parent, this, 0, inst);
			case 1: return new OseeEnumType_LeftCurlyBracketKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule OseeEnumType ****************/


/************ begin Rule OseeEnumEntry ****************
 *
 * OseeEnumEntry:
 *   "entry" name=STRING ordinal=DIGITS?;
 *
 **/

// "entry" name=STRING ordinal=DIGITS?
protected class OseeEnumEntry_Group extends GroupToken {
	
	public OseeEnumEntry_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOseeEnumEntryAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OseeEnumEntry_OrdinalAssignment_2(parent, this, 0, inst);
			case 1: return new OseeEnumEntry_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOseeEnumEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "entry"
protected class OseeEnumEntry_EntryKeyword_0 extends KeywordToken  {
	
	public OseeEnumEntry_EntryKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOseeEnumEntryAccess().getEntryKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=STRING
protected class OseeEnumEntry_NameAssignment_1 extends AssignmentToken  {
	
	public OseeEnumEntry_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOseeEnumEntryAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OseeEnumEntry_EntryKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOseeEnumEntryAccess().getNameSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ordinal=DIGITS?
protected class OseeEnumEntry_OrdinalAssignment_2 extends AssignmentToken  {
	
	public OseeEnumEntry_OrdinalAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOseeEnumEntryAccess().getOrdinalAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OseeEnumEntry_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("ordinal",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ordinal");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getOseeEnumEntryAccess().getOrdinalDIGITSParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule OseeEnumEntry ****************/


/************ begin Rule RelationType ****************
 *
 * RelationType:
 *   "relationType" name=QUALIFIED_NAME "{" "sideAName" sideAName=STRING
 *   "sideAArtifactType" sideAArtifactType=[ArtifactType] "sideBName" sideBName=STRING
 *   "sideBArtifactType" sideBArtifactType=[ArtifactType] "defaultOrderType"
 *   defaultOrderType=( "Lexicographical_Ascending" | "Lexicographical_Descending" |
 *   "Unordered" | ID ) "multiplicity" multiplicity=RelationMultiplicityEnum "}";
 *
 **/

// "relationType" name=QUALIFIED_NAME "{" "sideAName" sideAName=STRING
// "sideAArtifactType" sideAArtifactType=[ArtifactType] "sideBName" sideBName=STRING
// "sideBArtifactType" sideBArtifactType=[ArtifactType] "defaultOrderType"
// defaultOrderType=( "Lexicographical_Ascending" | "Lexicographical_Descending" |
// "Unordered" | ID ) "multiplicity" multiplicity=RelationMultiplicityEnum "}"
protected class RelationType_Group extends GroupToken {
	
	public RelationType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_RightCurlyBracketKeyword_15(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRelationTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "relationType"
protected class RelationType_RelationTypeKeyword_0 extends KeywordToken  {
	
	public RelationType_RelationTypeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getRelationTypeKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=QUALIFIED_NAME
protected class RelationType_NameAssignment_1 extends AssignmentToken  {
	
	public RelationType_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_RelationTypeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getRelationTypeAccess().getNameQUALIFIED_NAMEParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class RelationType_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public RelationType_LeftCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getLeftCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "sideAName"
protected class RelationType_SideANameKeyword_3 extends KeywordToken  {
	
	public RelationType_SideANameKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getSideANameKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_LeftCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// sideAName=STRING
protected class RelationType_SideANameAssignment_4 extends AssignmentToken  {
	
	public RelationType_SideANameAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getSideANameAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_SideANameKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sideAName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sideAName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getRelationTypeAccess().getSideANameSTRINGTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// "sideAArtifactType"
protected class RelationType_SideAArtifactTypeKeyword_5 extends KeywordToken  {
	
	public RelationType_SideAArtifactTypeKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getSideAArtifactTypeKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_SideANameAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// sideAArtifactType=[ArtifactType]
protected class RelationType_SideAArtifactTypeAssignment_6 extends AssignmentToken  {
	
	public RelationType_SideAArtifactTypeAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getSideAArtifactTypeAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_SideAArtifactTypeKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sideAArtifactType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sideAArtifactType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationTypeAccess().getSideAArtifactTypeArtifactTypeCrossReference_6_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getRelationTypeAccess().getSideAArtifactTypeArtifactTypeCrossReference_6_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "sideBName"
protected class RelationType_SideBNameKeyword_7 extends KeywordToken  {
	
	public RelationType_SideBNameKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getSideBNameKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_SideAArtifactTypeAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// sideBName=STRING
protected class RelationType_SideBNameAssignment_8 extends AssignmentToken  {
	
	public RelationType_SideBNameAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getSideBNameAssignment_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_SideBNameKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sideBName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sideBName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getRelationTypeAccess().getSideBNameSTRINGTerminalRuleCall_8_0();
			return obj;
		}
		return null;
	}

}

// "sideBArtifactType"
protected class RelationType_SideBArtifactTypeKeyword_9 extends KeywordToken  {
	
	public RelationType_SideBArtifactTypeKeyword_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getSideBArtifactTypeKeyword_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_SideBNameAssignment_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// sideBArtifactType=[ArtifactType]
protected class RelationType_SideBArtifactTypeAssignment_10 extends AssignmentToken  {
	
	public RelationType_SideBArtifactTypeAssignment_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getSideBArtifactTypeAssignment_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_SideBArtifactTypeKeyword_9(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sideBArtifactType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sideBArtifactType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationTypeAccess().getSideBArtifactTypeArtifactTypeCrossReference_10_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getRelationTypeAccess().getSideBArtifactTypeArtifactTypeCrossReference_10_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "defaultOrderType"
protected class RelationType_DefaultOrderTypeKeyword_11 extends KeywordToken  {
	
	public RelationType_DefaultOrderTypeKeyword_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getDefaultOrderTypeKeyword_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_SideBArtifactTypeAssignment_10(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// defaultOrderType=( "Lexicographical_Ascending" | "Lexicographical_Descending" |
// "Unordered" | ID )
protected class RelationType_DefaultOrderTypeAssignment_12 extends AssignmentToken  {
	
	public RelationType_DefaultOrderTypeAssignment_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getDefaultOrderTypeAssignment_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_DefaultOrderTypeKeyword_11(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("defaultOrderType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("defaultOrderType");
		if("Lexicographical_Ascending".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRelationTypeAccess().getDefaultOrderTypeLexicographical_AscendingKeyword_12_0_0();
			return obj;
		}
		if("Lexicographical_Descending".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRelationTypeAccess().getDefaultOrderTypeLexicographical_DescendingKeyword_12_0_1();
			return obj;
		}
		if("Unordered".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRelationTypeAccess().getDefaultOrderTypeUnorderedKeyword_12_0_2();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getRelationTypeAccess().getDefaultOrderTypeIDTerminalRuleCall_12_0_3();
			return obj;
		}
		return null;
	}

}

// "multiplicity"
protected class RelationType_MultiplicityKeyword_13 extends KeywordToken  {
	
	public RelationType_MultiplicityKeyword_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getMultiplicityKeyword_13();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_DefaultOrderTypeAssignment_12(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// multiplicity=RelationMultiplicityEnum
protected class RelationType_MultiplicityAssignment_14 extends AssignmentToken  {
	
	public RelationType_MultiplicityAssignment_14(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getMultiplicityAssignment_14();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_MultiplicityKeyword_13(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("multiplicity",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("multiplicity");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getRelationTypeAccess().getMultiplicityRelationMultiplicityEnumEnumRuleCall_14_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class RelationType_RightCurlyBracketKeyword_15 extends KeywordToken  {
	
	public RelationType_RightCurlyBracketKeyword_15(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getRightCurlyBracketKeyword_15();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_MultiplicityAssignment_14(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule RelationType ****************/

}
