/*
* generated by Xtext
*/
package org.eclipse.osee.framework.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.osee.framework.services.OseeTypesGrammarAccess;

import com.google.inject.Inject;

public class OseeTypesParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private OseeTypesGrammarAccess grammarAccess;
		
	public OseeTypesGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group(this, this, 0, inst);
			case 1: return new Import_Group(this, this, 1, inst);
			case 2: return new Type_Alternatives(this, this, 2, inst);
			case 3: return new ArtifactType_Group(this, this, 3, inst);
			case 4: return new XRef_Alternatives(this, this, 4, inst);
			case 5: return new RelationTypeRef_Group(this, this, 5, inst);
			case 6: return new AttributeTypeRef_Group(this, this, 6, inst);
			case 7: return new AttributeType_Group(this, this, 7, inst);
			case 8: return new XAttribute_Group(this, this, 8, inst);
			case 9: return new RelationType_Group(this, this, 9, inst);
			case 10: return new XRelation_Group(this, this, 10, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   imports+=Import* elements+=Type*;
 *
 **/

// imports+=Import* elements+=Type*
protected class Model_Group extends GroupToken {
	
	public Model_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_ElementsAssignment_1(parent, this, 0, inst);
			case 1: return new Model_ImportsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// imports+=Import*
protected class Model_ImportsAssignment_0 extends AssignmentToken  {
	
	public Model_ImportsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getImportsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("imports",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// elements+=Type*
protected class Model_ElementsAssignment_1 extends AssignmentToken  {
	
	public Model_ElementsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getElementsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getElementsTypeParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_ElementsAssignment_1(parent, next, actIndex, consumed);
			case 1: return new Model_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}


/************ end Rule Model ****************/


/************ begin Rule Import ****************
 *
 * Import:
 *   "import" importURI=STRING;
 *
 **/

// "import" importURI=STRING
protected class Import_Group extends GroupToken {
	
	public Import_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportURIAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "import"
protected class Import_ImportKeyword_0 extends KeywordToken  {
	
	public Import_ImportKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getImportKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// importURI=STRING
protected class Import_ImportURIAssignment_1 extends AssignmentToken  {
	
	public Import_ImportURIAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getImportURIAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("importURI",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("importURI");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Import ****************/


/************ begin Rule Type ****************
 *
 * Type:
 *   ArtifactType|RelationType|AttributeType;
 *
 **/

// ArtifactType|RelationType|AttributeType
protected class Type_Alternatives extends AlternativesToken {

	public Type_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getTypeAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_ArtifactTypeParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Type_RelationTypeParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Type_AttributeTypeParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ArtifactType
protected class Type_ArtifactTypeParserRuleCall_0 extends RuleCallToken {
	
	public Type_ArtifactTypeParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getArtifactTypeParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArtifactType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ArtifactType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getArtifactTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// RelationType
protected class Type_RelationTypeParserRuleCall_1 extends RuleCallToken {
	
	public Type_RelationTypeParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getRelationTypeParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RelationType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRelationTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// AttributeType
protected class Type_AttributeTypeParserRuleCall_2 extends RuleCallToken {
	
	public Type_AttributeTypeParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getAttributeTypeParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AttributeType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAttributeTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Type ****************/


/************ begin Rule ArtifactType ****************
 *
 * ArtifactType:
 *   "artifactType" name=ID ("extends" superEntity=[ArtifactType])? "{" attributes+=XRef*
 *   "}";
 *
 **/

// "artifactType" name=ID ("extends" superEntity=[ArtifactType])? "{" attributes+=XRef*
// "}"
protected class ArtifactType_Group extends GroupToken {
	
	public ArtifactType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getArtifactTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArtifactType_RightCurlyBracketKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getArtifactTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "artifactType"
protected class ArtifactType_ArtifactTypeKeyword_0 extends KeywordToken  {
	
	public ArtifactType_ArtifactTypeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getArtifactTypeAccess().getArtifactTypeKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class ArtifactType_NameAssignment_1 extends AssignmentToken  {
	
	public ArtifactType_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getArtifactTypeAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArtifactType_ArtifactTypeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getArtifactTypeAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("extends" superEntity=[ArtifactType])?
protected class ArtifactType_Group_2 extends GroupToken {
	
	public ArtifactType_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getArtifactTypeAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArtifactType_SuperEntityAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class ArtifactType_ExtendsKeyword_2_0 extends KeywordToken  {
	
	public ArtifactType_ExtendsKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getArtifactTypeAccess().getExtendsKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArtifactType_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// superEntity=[ArtifactType]
protected class ArtifactType_SuperEntityAssignment_2_1 extends AssignmentToken  {
	
	public ArtifactType_SuperEntityAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getArtifactTypeAccess().getSuperEntityAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArtifactType_ExtendsKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("superEntity",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("superEntity");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArtifactTypeAccess().getSuperEntityArtifactTypeCrossReference_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getArtifactTypeAccess().getSuperEntityArtifactTypeCrossReference_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "{"
protected class ArtifactType_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public ArtifactType_LeftCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getArtifactTypeAccess().getLeftCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArtifactType_Group_2(parent, this, 0, inst);
			case 1: return new ArtifactType_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// attributes+=XRef*
protected class ArtifactType_AttributesAssignment_4 extends AssignmentToken  {
	
	public ArtifactType_AttributesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getArtifactTypeAccess().getAttributesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("attributes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("attributes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getArtifactTypeAccess().getAttributesXRefParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ArtifactType_AttributesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new ArtifactType_LeftCurlyBracketKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ArtifactType_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public ArtifactType_RightCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getArtifactTypeAccess().getRightCurlyBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArtifactType_AttributesAssignment_4(parent, this, 0, inst);
			case 1: return new ArtifactType_LeftCurlyBracketKeyword_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ArtifactType ****************/


/************ begin Rule XRef ****************
 *
 * XRef:
 *   RelationTypeRef|AttributeTypeRef;
 *
 **/

// RelationTypeRef|AttributeTypeRef
protected class XRef_Alternatives extends AlternativesToken {

	public XRef_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getXRefAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRef_RelationTypeRefParserRuleCall_0(parent, this, 0, inst);
			case 1: return new XRef_AttributeTypeRefParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getXRefRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// RelationTypeRef
protected class XRef_RelationTypeRefParserRuleCall_0 extends RuleCallToken {
	
	public XRef_RelationTypeRefParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getXRefAccess().getRelationTypeRefParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationTypeRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RelationTypeRef_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRelationTypeRefRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// AttributeTypeRef
protected class XRef_AttributeTypeRefParserRuleCall_1 extends RuleCallToken {
	
	public XRef_AttributeTypeRefParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getXRefAccess().getAttributeTypeRefParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeTypeRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AttributeTypeRef_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAttributeTypeRefRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule XRef ****************/


/************ begin Rule RelationTypeRef ****************
 *
 * RelationTypeRef:
 *   "relation" type=[RelationType];
 *
 **/

// "relation" type=[RelationType]
protected class RelationTypeRef_Group extends GroupToken {
	
	public RelationTypeRef_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRelationTypeRefAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationTypeRef_TypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRelationTypeRefRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "relation"
protected class RelationTypeRef_RelationKeyword_0 extends KeywordToken  {
	
	public RelationTypeRef_RelationKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRelationTypeRefAccess().getRelationKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// type=[RelationType]
protected class RelationTypeRef_TypeAssignment_1 extends AssignmentToken  {
	
	public RelationTypeRef_TypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationTypeRefAccess().getTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationTypeRef_RelationKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationTypeRefAccess().getTypeRelationTypeCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getRelationTypeRefAccess().getTypeRelationTypeCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule RelationTypeRef ****************/


/************ begin Rule AttributeTypeRef ****************
 *
 * AttributeTypeRef:
 *   "attribute" type=[AttributeType];
 *
 **/

// "attribute" type=[AttributeType]
protected class AttributeTypeRef_Group extends GroupToken {
	
	public AttributeTypeRef_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAttributeTypeRefAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeTypeRef_TypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAttributeTypeRefRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "attribute"
protected class AttributeTypeRef_AttributeKeyword_0 extends KeywordToken  {
	
	public AttributeTypeRef_AttributeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeTypeRefAccess().getAttributeKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// type=[AttributeType]
protected class AttributeTypeRef_TypeAssignment_1 extends AssignmentToken  {
	
	public AttributeTypeRef_TypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeTypeRefAccess().getTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeTypeRef_AttributeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttributeTypeRefAccess().getTypeAttributeTypeCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAttributeTypeRefAccess().getTypeAttributeTypeCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule AttributeTypeRef ****************/


/************ begin Rule AttributeType ****************
 *
 * AttributeType:
 *   "attributeType" name=ID ("extends" superEntity=[AttributeType])? "{" attributes+=
 *   XAttribute "}";
 *
 **/

// "attributeType" name=ID ("extends" superEntity=[AttributeType])? "{" attributes+=
// XAttribute "}"
protected class AttributeType_Group extends GroupToken {
	
	public AttributeType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_RightCurlyBracketKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAttributeTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "attributeType"
protected class AttributeType_AttributeTypeKeyword_0 extends KeywordToken  {
	
	public AttributeType_AttributeTypeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getAttributeTypeKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class AttributeType_NameAssignment_1 extends AssignmentToken  {
	
	public AttributeType_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_AttributeTypeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttributeTypeAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("extends" superEntity=[AttributeType])?
protected class AttributeType_Group_2 extends GroupToken {
	
	public AttributeType_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_SuperEntityAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class AttributeType_ExtendsKeyword_2_0 extends KeywordToken  {
	
	public AttributeType_ExtendsKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getExtendsKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// superEntity=[AttributeType]
protected class AttributeType_SuperEntityAssignment_2_1 extends AssignmentToken  {
	
	public AttributeType_SuperEntityAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getSuperEntityAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_ExtendsKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("superEntity",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("superEntity");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttributeTypeAccess().getSuperEntityAttributeTypeCrossReference_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAttributeTypeAccess().getSuperEntityAttributeTypeCrossReference_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "{"
protected class AttributeType_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public AttributeType_LeftCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getLeftCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_Group_2(parent, this, 0, inst);
			case 1: return new AttributeType_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// attributes+=XAttribute
protected class AttributeType_AttributesAssignment_4 extends AssignmentToken  {
	
	public AttributeType_AttributesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getAttributesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttribute_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("attributes",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("attributes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXAttributeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAttributeTypeAccess().getAttributesXAttributeParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AttributeType_LeftCurlyBracketKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class AttributeType_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public AttributeType_RightCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeTypeAccess().getRightCurlyBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeType_AttributesAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule AttributeType ****************/


/************ begin Rule XAttribute ****************
 *
 * XAttribute:
 *   "dataProvider" name=ID "taggerId" name=ID ("defaultValue" name=STRING)?;
 *
 **/

// "dataProvider" name=ID "taggerId" name=ID ("defaultValue" name=STRING)?
protected class XAttribute_Group extends GroupToken {
	
	public XAttribute_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getXAttributeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttribute_Group_4(parent, this, 0, inst);
			case 1: return new XAttribute_NameAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getXAttributeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "dataProvider"
protected class XAttribute_DataProviderKeyword_0 extends KeywordToken  {
	
	public XAttribute_DataProviderKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getXAttributeAccess().getDataProviderKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class XAttribute_NameAssignment_1 extends AssignmentToken  {
	
	public XAttribute_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXAttributeAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttribute_DataProviderKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getXAttributeAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "taggerId"
protected class XAttribute_TaggerIdKeyword_2 extends KeywordToken  {
	
	public XAttribute_TaggerIdKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getXAttributeAccess().getTaggerIdKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttribute_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class XAttribute_NameAssignment_3 extends AssignmentToken  {
	
	public XAttribute_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXAttributeAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttribute_TaggerIdKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getXAttributeAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("defaultValue" name=STRING)?
protected class XAttribute_Group_4 extends GroupToken {
	
	public XAttribute_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getXAttributeAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttribute_NameAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "defaultValue"
protected class XAttribute_DefaultValueKeyword_4_0 extends KeywordToken  {
	
	public XAttribute_DefaultValueKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getXAttributeAccess().getDefaultValueKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttribute_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=STRING
protected class XAttribute_NameAssignment_4_1 extends AssignmentToken  {
	
	public XAttribute_NameAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXAttributeAccess().getNameAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttribute_DefaultValueKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getXAttributeAccess().getNameSTRINGTerminalRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule XAttribute ****************/


/************ begin Rule RelationType ****************
 *
 * RelationType:
 *   "relationType" name=ID "{" attributes+=XRelation "}";
 *
 **/

// "relationType" name=ID "{" attributes+=XRelation "}"
protected class RelationType_Group extends GroupToken {
	
	public RelationType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_RightCurlyBracketKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRelationTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "relationType"
protected class RelationType_RelationTypeKeyword_0 extends KeywordToken  {
	
	public RelationType_RelationTypeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getRelationTypeKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class RelationType_NameAssignment_1 extends AssignmentToken  {
	
	public RelationType_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_RelationTypeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getRelationTypeAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class RelationType_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public RelationType_LeftCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getLeftCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// attributes+=XRelation
protected class RelationType_AttributesAssignment_3 extends AssignmentToken  {
	
	public RelationType_AttributesAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getAttributesAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("attributes",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("attributes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXRelationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRelationTypeAccess().getAttributesXRelationParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RelationType_LeftCurlyBracketKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class RelationType_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public RelationType_RightCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRelationTypeAccess().getRightCurlyBracketKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RelationType_AttributesAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule RelationType ****************/


/************ begin Rule XRelation ****************
 *
 * XRelation:
 *   "sideAName" name=STRING "sideAArtifactType" type=[ArtifactType] "sideBName" name=
 *   STRING "sideBArtifactType" type=[ArtifactType] "defaultOrderType" name=STRING
 *   "multiplicity" name=( "one-to-many" | "many-to-many" | "many-to-one" );
 *
 **/

// "sideAName" name=STRING "sideAArtifactType" type=[ArtifactType] "sideBName" name=
// STRING "sideBArtifactType" type=[ArtifactType] "defaultOrderType" name=STRING
// "multiplicity" name=( "one-to-many" | "many-to-many" | "many-to-one" )
protected class XRelation_Group extends GroupToken {
	
	public XRelation_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getXRelationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelation_NameAssignment_11(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getXRelationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "sideAName"
protected class XRelation_SideANameKeyword_0 extends KeywordToken  {
	
	public XRelation_SideANameKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getXRelationAccess().getSideANameKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=STRING
protected class XRelation_NameAssignment_1 extends AssignmentToken  {
	
	public XRelation_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXRelationAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelation_SideANameKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getXRelationAccess().getNameSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "sideAArtifactType"
protected class XRelation_SideAArtifactTypeKeyword_2 extends KeywordToken  {
	
	public XRelation_SideAArtifactTypeKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getXRelationAccess().getSideAArtifactTypeKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelation_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=[ArtifactType]
protected class XRelation_TypeAssignment_3 extends AssignmentToken  {
	
	public XRelation_TypeAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXRelationAccess().getTypeAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelation_SideAArtifactTypeKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXRelationAccess().getTypeArtifactTypeCrossReference_3_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getXRelationAccess().getTypeArtifactTypeCrossReference_3_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "sideBName"
protected class XRelation_SideBNameKeyword_4 extends KeywordToken  {
	
	public XRelation_SideBNameKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getXRelationAccess().getSideBNameKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelation_TypeAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=STRING
protected class XRelation_NameAssignment_5 extends AssignmentToken  {
	
	public XRelation_NameAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXRelationAccess().getNameAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelation_SideBNameKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getXRelationAccess().getNameSTRINGTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// "sideBArtifactType"
protected class XRelation_SideBArtifactTypeKeyword_6 extends KeywordToken  {
	
	public XRelation_SideBArtifactTypeKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getXRelationAccess().getSideBArtifactTypeKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelation_NameAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// type=[ArtifactType]
protected class XRelation_TypeAssignment_7 extends AssignmentToken  {
	
	public XRelation_TypeAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXRelationAccess().getTypeAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelation_SideBArtifactTypeKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXRelationAccess().getTypeArtifactTypeCrossReference_7_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getXRelationAccess().getTypeArtifactTypeCrossReference_7_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "defaultOrderType"
protected class XRelation_DefaultOrderTypeKeyword_8 extends KeywordToken  {
	
	public XRelation_DefaultOrderTypeKeyword_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getXRelationAccess().getDefaultOrderTypeKeyword_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelation_TypeAssignment_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=STRING
protected class XRelation_NameAssignment_9 extends AssignmentToken  {
	
	public XRelation_NameAssignment_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXRelationAccess().getNameAssignment_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelation_DefaultOrderTypeKeyword_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getXRelationAccess().getNameSTRINGTerminalRuleCall_9_0();
			return obj;
		}
		return null;
	}

}

// "multiplicity"
protected class XRelation_MultiplicityKeyword_10 extends KeywordToken  {
	
	public XRelation_MultiplicityKeyword_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getXRelationAccess().getMultiplicityKeyword_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelation_NameAssignment_9(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=( "one-to-many" | "many-to-many" | "many-to-one" )
protected class XRelation_NameAssignment_11 extends AssignmentToken  {
	
	public XRelation_NameAssignment_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getXRelationAccess().getNameAssignment_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelation_MultiplicityKeyword_10(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("one-to-many".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getXRelationAccess().getNameOneToManyKeyword_11_0_0();
			return obj;
		}
		if("many-to-many".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getXRelationAccess().getNameManyToManyKeyword_11_0_1();
			return obj;
		}
		if("many-to-one".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getXRelationAccess().getNameManyToOneKeyword_11_0_2();
			return obj;
		}
		return null;
	}

}


/************ end Rule XRelation ****************/

}
