/*
* generated by Xtext
*/

package org.eclipse.osee.framework.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class OseeTypesGrammarAccess implements IGrammarAccess {
	
	
	public class ModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsTypeParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//Model:
		//  imports+=Import* elements+=Type*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* elements+=Type*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//elements+=Type*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//Type
		public RuleCall getElementsTypeParserRuleCall_1_0() { return cElementsTypeParserRuleCall_1_0; }
	}

	public class ImportElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//  "import" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class TypeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArtifactTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Type:
		//  ArtifactType|RelationType|AttributeType;
		public ParserRule getRule() { return rule; }

		//ArtifactType|RelationType|AttributeType
		public Alternatives getAlternatives() { return cAlternatives; }

		//ArtifactType
		public RuleCall getArtifactTypeParserRuleCall_0() { return cArtifactTypeParserRuleCall_0; }

		//RelationType
		public RuleCall getRelationTypeParserRuleCall_1() { return cRelationTypeParserRuleCall_1; }

		//AttributeType
		public RuleCall getAttributeTypeParserRuleCall_2() { return cAttributeTypeParserRuleCall_2; }
	}

	public class ArtifactTypeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArtifactType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArtifactTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperEntityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperEntityArtifactTypeCrossReference_2_1_0 = (CrossReference)cSuperEntityAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperEntityArtifactTypeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperEntityArtifactTypeCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesXRefParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ArtifactType:
		//  "artifactType" name=ID ("extends" superEntity=[ArtifactType])? "{" attributes+=XRef*
		//  "}";
		public ParserRule getRule() { return rule; }

		//"artifactType" name=ID ("extends" superEntity=[ArtifactType])? "{" attributes+=XRef*
		//"}"
		public Group getGroup() { return cGroup; }

		//"artifactType"
		public Keyword getArtifactTypeKeyword_0() { return cArtifactTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" superEntity=[ArtifactType])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superEntity=[ArtifactType]
		public Assignment getSuperEntityAssignment_2_1() { return cSuperEntityAssignment_2_1; }

		//[ArtifactType]
		public CrossReference getSuperEntityArtifactTypeCrossReference_2_1_0() { return cSuperEntityArtifactTypeCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperEntityArtifactTypeIDTerminalRuleCall_2_1_0_1() { return cSuperEntityArtifactTypeIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//attributes+=XRef*
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }

		//XRef
		public RuleCall getAttributesXRefParserRuleCall_4_0() { return cAttributesXRefParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class XRefElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRelationTypeRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeTypeRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XRef:
		//  RelationTypeRef|AttributeTypeRef;
		public ParserRule getRule() { return rule; }

		//RelationTypeRef|AttributeTypeRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//RelationTypeRef
		public RuleCall getRelationTypeRefParserRuleCall_0() { return cRelationTypeRefParserRuleCall_0; }

		//AttributeTypeRef
		public RuleCall getAttributeTypeRefParserRuleCall_1() { return cAttributeTypeRefParserRuleCall_1; }
	}

	public class RelationTypeRefElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeRelationTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeRelationTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeRelationTypeCrossReference_1_0.eContents().get(1);
		
		//RelationTypeRef:
		//  "relation" type=[RelationType];
		public ParserRule getRule() { return rule; }

		//"relation" type=[RelationType]
		public Group getGroup() { return cGroup; }

		//"relation"
		public Keyword getRelationKeyword_0() { return cRelationKeyword_0; }

		//type=[RelationType]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[RelationType]
		public CrossReference getTypeRelationTypeCrossReference_1_0() { return cTypeRelationTypeCrossReference_1_0; }

		//ID
		public RuleCall getTypeRelationTypeIDTerminalRuleCall_1_0_1() { return cTypeRelationTypeIDTerminalRuleCall_1_0_1; }
	}

	public class AttributeTypeRefElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeAttributeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeAttributeTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeAttributeTypeCrossReference_1_0.eContents().get(1);
		
		//AttributeTypeRef:
		//  "attribute" type=[AttributeType];
		public ParserRule getRule() { return rule; }

		//"attribute" type=[AttributeType]
		public Group getGroup() { return cGroup; }

		//"attribute"
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }

		//type=[AttributeType]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[AttributeType]
		public CrossReference getTypeAttributeTypeCrossReference_1_0() { return cTypeAttributeTypeCrossReference_1_0; }

		//ID
		public RuleCall getTypeAttributeTypeIDTerminalRuleCall_1_0_1() { return cTypeAttributeTypeIDTerminalRuleCall_1_0_1; }
	}

	public class AttributeTypeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperEntityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperEntityAttributeTypeCrossReference_2_1_0 = (CrossReference)cSuperEntityAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperEntityAttributeTypeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperEntityAttributeTypeCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesXAttributeParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AttributeType:
		//  "attributeType" name=ID ("extends" superEntity=[AttributeType])? "{" attributes+=
		//  XAttribute "}";
		public ParserRule getRule() { return rule; }

		//"attributeType" name=ID ("extends" superEntity=[AttributeType])? "{" attributes+=
		//XAttribute "}"
		public Group getGroup() { return cGroup; }

		//"attributeType"
		public Keyword getAttributeTypeKeyword_0() { return cAttributeTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" superEntity=[AttributeType])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superEntity=[AttributeType]
		public Assignment getSuperEntityAssignment_2_1() { return cSuperEntityAssignment_2_1; }

		//[AttributeType]
		public CrossReference getSuperEntityAttributeTypeCrossReference_2_1_0() { return cSuperEntityAttributeTypeCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperEntityAttributeTypeIDTerminalRuleCall_2_1_0_1() { return cSuperEntityAttributeTypeIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//attributes+=XAttribute
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }

		//XAttribute
		public RuleCall getAttributesXAttributeParserRuleCall_4_0() { return cAttributesXAttributeParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class XAttributeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataProviderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTaggerIdKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDefaultValueKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		
		//XAttribute:
		//  "dataProvider" name=ID "taggerId" name=ID ("defaultValue" name=STRING)?;
		public ParserRule getRule() { return rule; }

		//"dataProvider" name=ID "taggerId" name=ID ("defaultValue" name=STRING)?
		public Group getGroup() { return cGroup; }

		//"dataProvider"
		public Keyword getDataProviderKeyword_0() { return cDataProviderKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"taggerId"
		public Keyword getTaggerIdKeyword_2() { return cTaggerIdKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//("defaultValue" name=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"defaultValue"
		public Keyword getDefaultValueKeyword_4_0() { return cDefaultValueKeyword_4_0; }

		//name=STRING
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_4_1_0() { return cNameSTRINGTerminalRuleCall_4_1_0; }
	}

	public class RelationTypeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesXRelationParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RelationType:
		//  "relationType" name=ID "{" attributes+=XRelation "}";
		public ParserRule getRule() { return rule; }

		//"relationType" name=ID "{" attributes+=XRelation "}"
		public Group getGroup() { return cGroup; }

		//"relationType"
		public Keyword getRelationTypeKeyword_0() { return cRelationTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//attributes+=XRelation
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }

		//XRelation
		public RuleCall getAttributesXRelationParserRuleCall_3_0() { return cAttributesXRelationParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class XRelationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSideANameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSideAArtifactTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeArtifactTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeArtifactTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeArtifactTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cSideBNameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameSTRINGTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cSideBArtifactTypeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTypeArtifactTypeCrossReference_7_0 = (CrossReference)cTypeAssignment_7.eContents().get(0);
		private final RuleCall cTypeArtifactTypeIDTerminalRuleCall_7_0_1 = (RuleCall)cTypeArtifactTypeCrossReference_7_0.eContents().get(1);
		private final Keyword cDefaultOrderTypeKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cNameAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cNameSTRINGTerminalRuleCall_9_0 = (RuleCall)cNameAssignment_9.eContents().get(0);
		private final Keyword cMultiplicityKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cNameAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final Alternatives cNameAlternatives_11_0 = (Alternatives)cNameAssignment_11.eContents().get(0);
		private final Keyword cNameOneToManyKeyword_11_0_0 = (Keyword)cNameAlternatives_11_0.eContents().get(0);
		private final Keyword cNameManyToManyKeyword_11_0_1 = (Keyword)cNameAlternatives_11_0.eContents().get(1);
		private final Keyword cNameManyToOneKeyword_11_0_2 = (Keyword)cNameAlternatives_11_0.eContents().get(2);
		
		//XRelation:
		//  "sideAName" name=STRING "sideAArtifactType" type=[ArtifactType] "sideBName" name=
		//  STRING "sideBArtifactType" type=[ArtifactType] "defaultOrderType" name=STRING
		//  "multiplicity" name=( "one-to-many" | "many-to-many" | "many-to-one" );
		public ParserRule getRule() { return rule; }

		//"sideAName" name=STRING "sideAArtifactType" type=[ArtifactType] "sideBName" name=
		//STRING "sideBArtifactType" type=[ArtifactType] "defaultOrderType" name=STRING
		//"multiplicity" name=( "one-to-many" | "many-to-many" | "many-to-one" )
		public Group getGroup() { return cGroup; }

		//"sideAName"
		public Keyword getSideANameKeyword_0() { return cSideANameKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"sideAArtifactType"
		public Keyword getSideAArtifactTypeKeyword_2() { return cSideAArtifactTypeKeyword_2; }

		//type=[ArtifactType]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[ArtifactType]
		public CrossReference getTypeArtifactTypeCrossReference_3_0() { return cTypeArtifactTypeCrossReference_3_0; }

		//ID
		public RuleCall getTypeArtifactTypeIDTerminalRuleCall_3_0_1() { return cTypeArtifactTypeIDTerminalRuleCall_3_0_1; }

		//"sideBName"
		public Keyword getSideBNameKeyword_4() { return cSideBNameKeyword_4; }

		//name=STRING
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_5_0() { return cNameSTRINGTerminalRuleCall_5_0; }

		//"sideBArtifactType"
		public Keyword getSideBArtifactTypeKeyword_6() { return cSideBArtifactTypeKeyword_6; }

		//type=[ArtifactType]
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }

		//[ArtifactType]
		public CrossReference getTypeArtifactTypeCrossReference_7_0() { return cTypeArtifactTypeCrossReference_7_0; }

		//ID
		public RuleCall getTypeArtifactTypeIDTerminalRuleCall_7_0_1() { return cTypeArtifactTypeIDTerminalRuleCall_7_0_1; }

		//"defaultOrderType"
		public Keyword getDefaultOrderTypeKeyword_8() { return cDefaultOrderTypeKeyword_8; }

		//name=STRING
		public Assignment getNameAssignment_9() { return cNameAssignment_9; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_9_0() { return cNameSTRINGTerminalRuleCall_9_0; }

		//"multiplicity"
		public Keyword getMultiplicityKeyword_10() { return cMultiplicityKeyword_10; }

		//name=( "one-to-many" | "many-to-many" | "many-to-one" )
		public Assignment getNameAssignment_11() { return cNameAssignment_11; }

		//"one-to-many"|"many-to-many"|"many-to-one"
		public Alternatives getNameAlternatives_11_0() { return cNameAlternatives_11_0; }

		//"one-to-many"
		public Keyword getNameOneToManyKeyword_11_0_0() { return cNameOneToManyKeyword_11_0_0; }

		//"many-to-many"
		public Keyword getNameManyToManyKeyword_11_0_1() { return cNameManyToManyKeyword_11_0_1; }

		//"many-to-one"
		public Keyword getNameManyToOneKeyword_11_0_2() { return cNameManyToOneKeyword_11_0_2; }
	}
	
	
	private ModelElements pModel;
	private ImportElements pImport;
	private TypeElements pType;
	private ArtifactTypeElements pArtifactType;
	private XRefElements pXRef;
	private RelationTypeRefElements pRelationTypeRef;
	private AttributeTypeRefElements pAttributeTypeRef;
	private AttributeTypeElements pAttributeType;
	private XAttributeElements pXAttribute;
	private RelationTypeElements pRelationType;
	private XRelationElements pXRelation;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public OseeTypesGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//  imports+=Import* elements+=Type*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Import:
	//  "import" importURI=STRING;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Type:
	//  ArtifactType|RelationType|AttributeType;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ArtifactType:
	//  "artifactType" name=ID ("extends" superEntity=[ArtifactType])? "{" attributes+=XRef*
	//  "}";
	public ArtifactTypeElements getArtifactTypeAccess() {
		return (pArtifactType != null) ? pArtifactType : (pArtifactType = new ArtifactTypeElements());
	}
	
	public ParserRule getArtifactTypeRule() {
		return getArtifactTypeAccess().getRule();
	}

	//XRef:
	//  RelationTypeRef|AttributeTypeRef;
	public XRefElements getXRefAccess() {
		return (pXRef != null) ? pXRef : (pXRef = new XRefElements());
	}
	
	public ParserRule getXRefRule() {
		return getXRefAccess().getRule();
	}

	//RelationTypeRef:
	//  "relation" type=[RelationType];
	public RelationTypeRefElements getRelationTypeRefAccess() {
		return (pRelationTypeRef != null) ? pRelationTypeRef : (pRelationTypeRef = new RelationTypeRefElements());
	}
	
	public ParserRule getRelationTypeRefRule() {
		return getRelationTypeRefAccess().getRule();
	}

	//AttributeTypeRef:
	//  "attribute" type=[AttributeType];
	public AttributeTypeRefElements getAttributeTypeRefAccess() {
		return (pAttributeTypeRef != null) ? pAttributeTypeRef : (pAttributeTypeRef = new AttributeTypeRefElements());
	}
	
	public ParserRule getAttributeTypeRefRule() {
		return getAttributeTypeRefAccess().getRule();
	}

	//AttributeType:
	//  "attributeType" name=ID ("extends" superEntity=[AttributeType])? "{" attributes+=
	//  XAttribute "}";
	public AttributeTypeElements getAttributeTypeAccess() {
		return (pAttributeType != null) ? pAttributeType : (pAttributeType = new AttributeTypeElements());
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	//XAttribute:
	//  "dataProvider" name=ID "taggerId" name=ID ("defaultValue" name=STRING)?;
	public XAttributeElements getXAttributeAccess() {
		return (pXAttribute != null) ? pXAttribute : (pXAttribute = new XAttributeElements());
	}
	
	public ParserRule getXAttributeRule() {
		return getXAttributeAccess().getRule();
	}

	//RelationType:
	//  "relationType" name=ID "{" attributes+=XRelation "}";
	public RelationTypeElements getRelationTypeAccess() {
		return (pRelationType != null) ? pRelationType : (pRelationType = new RelationTypeElements());
	}
	
	public ParserRule getRelationTypeRule() {
		return getRelationTypeAccess().getRule();
	}

	//XRelation:
	//  "sideAName" name=STRING "sideAArtifactType" type=[ArtifactType] "sideBName" name=
	//  STRING "sideBArtifactType" type=[ArtifactType] "defaultOrderType" name=STRING
	//  "multiplicity" name=( "one-to-many" | "many-to-many" | "many-to-one" );
	public XRelationElements getXRelationAccess() {
		return (pXRelation != null) ? pXRelation : (pXRelation = new XRelationElements());
	}
	
	public ParserRule getXRelationRule() {
		return getXRelationAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
