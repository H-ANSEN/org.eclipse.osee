/*
* generated by Xtext
*/
package org.eclipse.osee.framework.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.osee.framework.services.OseeTypesGrammarAccess;

public class OseeTypesParser extends AbstractContentAssistParser {
	
	@Inject
	private OseeTypesGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.osee.framework.contentassist.antlr.internal.InternalOseeTypesLexer createLexer(CharStream stream) {
		return new org.eclipse.osee.framework.contentassist.antlr.internal.InternalOseeTypesLexer(stream);
	}
	
	@Override
	protected org.eclipse.osee.framework.contentassist.antlr.internal.InternalOseeTypesParser createParser() {
		org.eclipse.osee.framework.contentassist.antlr.internal.InternalOseeTypesParser result = new org.eclipse.osee.framework.contentassist.antlr.internal.InternalOseeTypesParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getXRefAccess().getAlternatives(), "rule__XRef__Alternatives");
					put(grammarAccess.getXRelationAccess().getNameAlternatives_11_0(), "rule__XRelation__NameAlternatives_11_0");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getArtifactTypeAccess().getGroup(), "rule__ArtifactType__Group__0");
					put(grammarAccess.getArtifactTypeAccess().getGroup_2(), "rule__ArtifactType__Group_2__0");
					put(grammarAccess.getRelationTypeRefAccess().getGroup(), "rule__RelationTypeRef__Group__0");
					put(grammarAccess.getAttributeTypeRefAccess().getGroup(), "rule__AttributeTypeRef__Group__0");
					put(grammarAccess.getAttributeTypeAccess().getGroup(), "rule__AttributeType__Group__0");
					put(grammarAccess.getAttributeTypeAccess().getGroup_2(), "rule__AttributeType__Group_2__0");
					put(grammarAccess.getXAttributeAccess().getGroup(), "rule__XAttribute__Group__0");
					put(grammarAccess.getXAttributeAccess().getGroup_4(), "rule__XAttribute__Group_4__0");
					put(grammarAccess.getRelationTypeAccess().getGroup(), "rule__RelationType__Group__0");
					put(grammarAccess.getXRelationAccess().getGroup(), "rule__XRelation__Group__0");
					put(grammarAccess.getModelAccess().getImportsAssignment_0(), "rule__Model__ImportsAssignment_0");
					put(grammarAccess.getModelAccess().getElementsAssignment_1(), "rule__Model__ElementsAssignment_1");
					put(grammarAccess.getImportAccess().getImportURIAssignment_1(), "rule__Import__ImportURIAssignment_1");
					put(grammarAccess.getArtifactTypeAccess().getNameAssignment_1(), "rule__ArtifactType__NameAssignment_1");
					put(grammarAccess.getArtifactTypeAccess().getSuperEntityAssignment_2_1(), "rule__ArtifactType__SuperEntityAssignment_2_1");
					put(grammarAccess.getArtifactTypeAccess().getAttributesAssignment_4(), "rule__ArtifactType__AttributesAssignment_4");
					put(grammarAccess.getRelationTypeRefAccess().getTypeAssignment_1(), "rule__RelationTypeRef__TypeAssignment_1");
					put(grammarAccess.getAttributeTypeRefAccess().getTypeAssignment_1(), "rule__AttributeTypeRef__TypeAssignment_1");
					put(grammarAccess.getAttributeTypeAccess().getNameAssignment_1(), "rule__AttributeType__NameAssignment_1");
					put(grammarAccess.getAttributeTypeAccess().getSuperEntityAssignment_2_1(), "rule__AttributeType__SuperEntityAssignment_2_1");
					put(grammarAccess.getAttributeTypeAccess().getAttributesAssignment_4(), "rule__AttributeType__AttributesAssignment_4");
					put(grammarAccess.getXAttributeAccess().getNameAssignment_1(), "rule__XAttribute__NameAssignment_1");
					put(grammarAccess.getXAttributeAccess().getNameAssignment_3(), "rule__XAttribute__NameAssignment_3");
					put(grammarAccess.getXAttributeAccess().getNameAssignment_4_1(), "rule__XAttribute__NameAssignment_4_1");
					put(grammarAccess.getRelationTypeAccess().getNameAssignment_1(), "rule__RelationType__NameAssignment_1");
					put(grammarAccess.getRelationTypeAccess().getAttributesAssignment_3(), "rule__RelationType__AttributesAssignment_3");
					put(grammarAccess.getXRelationAccess().getNameAssignment_1(), "rule__XRelation__NameAssignment_1");
					put(grammarAccess.getXRelationAccess().getTypeAssignment_3(), "rule__XRelation__TypeAssignment_3");
					put(grammarAccess.getXRelationAccess().getNameAssignment_5(), "rule__XRelation__NameAssignment_5");
					put(grammarAccess.getXRelationAccess().getTypeAssignment_7(), "rule__XRelation__TypeAssignment_7");
					put(grammarAccess.getXRelationAccess().getNameAssignment_9(), "rule__XRelation__NameAssignment_9");
					put(grammarAccess.getXRelationAccess().getNameAssignment_11(), "rule__XRelation__NameAssignment_11");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.osee.framework.contentassist.antlr.internal.InternalOseeTypesParser typedParser = (org.eclipse.osee.framework.contentassist.antlr.internal.InternalOseeTypesParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public OseeTypesGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(OseeTypesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
