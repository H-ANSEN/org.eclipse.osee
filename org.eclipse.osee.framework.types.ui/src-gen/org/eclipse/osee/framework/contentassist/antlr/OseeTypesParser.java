/*
* generated by Xtext
*/
package org.eclipse.osee.framework.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.osee.framework.services.OseeTypesGrammarAccess;

public class OseeTypesParser extends AbstractContentAssistParser {
	
	@Inject
	private OseeTypesGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.osee.framework.contentassist.antlr.internal.InternalOseeTypesLexer createLexer(CharStream stream) {
		return new org.eclipse.osee.framework.contentassist.antlr.internal.InternalOseeTypesLexer(stream);
	}
	
	@Override
	protected org.eclipse.osee.framework.contentassist.antlr.internal.InternalOseeTypesParser createParser() {
		org.eclipse.osee.framework.contentassist.antlr.internal.InternalOseeTypesParser result = new org.eclipse.osee.framework.contentassist.antlr.internal.InternalOseeTypesParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				{
					put(grammarAccess.getOseeTypeAccess().getAlternatives(), "rule__OseeType__Alternatives");
					put(grammarAccess.getAttributeTypeAccess().getDataProviderAlternatives_7_0(), "rule__AttributeType__DataProviderAlternatives_7_0");
					put(grammarAccess.getAttributeTypeAccess().getMaxAlternatives_11_0(), "rule__AttributeType__MaxAlternatives_11_0");
					put(grammarAccess.getAttributeTypeAccess().getTaggerIdAlternatives_12_1_0(), "rule__AttributeType__TaggerIdAlternatives_12_1_0");
					put(grammarAccess.getAttributeBaseTypeAccess().getAlternatives(), "rule__AttributeBaseType__Alternatives");
					put(grammarAccess.getRelationTypeAccess().getDefaultOrderTypeAlternatives_14_0(), "rule__RelationType__DefaultOrderTypeAlternatives_14_0");
					put(grammarAccess.getRelationMultiplicityEnumAccess().getAlternatives(), "rule__RelationMultiplicityEnum__Alternatives");
					put(grammarAccess.getOseeTypeModelAccess().getGroup(), "rule__OseeTypeModel__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getQUALIFIED_NAMEAccess().getGroup(), "rule__QUALIFIED_NAME__Group__0");
					put(grammarAccess.getQUALIFIED_NAMEAccess().getGroup_1(), "rule__QUALIFIED_NAME__Group_1__0");
					put(grammarAccess.getArtifactTypeAccess().getGroup(), "rule__ArtifactType__Group__0");
					put(grammarAccess.getArtifactTypeAccess().getGroup_3(), "rule__ArtifactType__Group_3__0");
					put(grammarAccess.getArtifactTypeAccess().getGroup_3_2(), "rule__ArtifactType__Group_3_2__0");
					put(grammarAccess.getArtifactTypeAccess().getGroup_4(), "rule__ArtifactType__Group_4__0");
					put(grammarAccess.getAttributeTypeRefAccess().getGroup(), "rule__AttributeTypeRef__Group__0");
					put(grammarAccess.getAttributeTypeRefAccess().getGroup_2(), "rule__AttributeTypeRef__Group_2__0");
					put(grammarAccess.getAttributeTypeAccess().getGroup(), "rule__AttributeType__Group__0");
					put(grammarAccess.getAttributeTypeAccess().getGroup_3(), "rule__AttributeType__Group_3__0");
					put(grammarAccess.getAttributeTypeAccess().getGroup_4(), "rule__AttributeType__Group_4__0");
					put(grammarAccess.getAttributeTypeAccess().getGroup_12(), "rule__AttributeType__Group_12__0");
					put(grammarAccess.getAttributeTypeAccess().getGroup_13(), "rule__AttributeType__Group_13__0");
					put(grammarAccess.getAttributeTypeAccess().getGroup_14(), "rule__AttributeType__Group_14__0");
					put(grammarAccess.getAttributeTypeAccess().getGroup_15(), "rule__AttributeType__Group_15__0");
					put(grammarAccess.getAttributeTypeAccess().getGroup_16(), "rule__AttributeType__Group_16__0");
					put(grammarAccess.getOseeEnumTypeAccess().getGroup(), "rule__OseeEnumType__Group__0");
					put(grammarAccess.getOseeEnumTypeAccess().getGroup_2(), "rule__OseeEnumType__Group_2__0");
					put(grammarAccess.getOseeEnumEntryAccess().getGroup(), "rule__OseeEnumEntry__Group__0");
					put(grammarAccess.getRelationTypeAccess().getGroup(), "rule__RelationType__Group__0");
					put(grammarAccess.getRelationTypeAccess().getGroup_2(), "rule__RelationType__Group_2__0");
					put(grammarAccess.getOseeTypeModelAccess().getImportsAssignment_0(), "rule__OseeTypeModel__ImportsAssignment_0");
					put(grammarAccess.getOseeTypeModelAccess().getTypesAssignment_1(), "rule__OseeTypeModel__TypesAssignment_1");
					put(grammarAccess.getImportAccess().getImportURIAssignment_1(), "rule__Import__ImportURIAssignment_1");
					put(grammarAccess.getArtifactTypeAccess().getAbstractAssignment_0(), "rule__ArtifactType__AbstractAssignment_0");
					put(grammarAccess.getArtifactTypeAccess().getNameAssignment_2(), "rule__ArtifactType__NameAssignment_2");
					put(grammarAccess.getArtifactTypeAccess().getSuperArtifactTypesAssignment_3_1(), "rule__ArtifactType__SuperArtifactTypesAssignment_3_1");
					put(grammarAccess.getArtifactTypeAccess().getSuperArtifactTypesAssignment_3_2_1(), "rule__ArtifactType__SuperArtifactTypesAssignment_3_2_1");
					put(grammarAccess.getArtifactTypeAccess().getOverrideAssignment_4_1(), "rule__ArtifactType__OverrideAssignment_4_1");
					put(grammarAccess.getArtifactTypeAccess().getTypeGuidAssignment_6(), "rule__ArtifactType__TypeGuidAssignment_6");
					put(grammarAccess.getArtifactTypeAccess().getValidAttributeTypesAssignment_7(), "rule__ArtifactType__ValidAttributeTypesAssignment_7");
					put(grammarAccess.getAttributeTypeRefAccess().getValidAttributeTypeAssignment_1(), "rule__AttributeTypeRef__ValidAttributeTypeAssignment_1");
					put(grammarAccess.getAttributeTypeRefAccess().getBranchGuidAssignment_2_1(), "rule__AttributeTypeRef__BranchGuidAssignment_2_1");
					put(grammarAccess.getAttributeTypeAccess().getTypeGuidAssignment_0(), "rule__AttributeType__TypeGuidAssignment_0");
					put(grammarAccess.getAttributeTypeAccess().getNameAssignment_2(), "rule__AttributeType__NameAssignment_2");
					put(grammarAccess.getAttributeTypeAccess().getBaseAttributeTypeAssignment_3_1(), "rule__AttributeType__BaseAttributeTypeAssignment_3_1");
					put(grammarAccess.getAttributeTypeAccess().getOverrideAssignment_4_1(), "rule__AttributeType__OverrideAssignment_4_1");
					put(grammarAccess.getAttributeTypeAccess().getDataProviderAssignment_7(), "rule__AttributeType__DataProviderAssignment_7");
					put(grammarAccess.getAttributeTypeAccess().getMinAssignment_9(), "rule__AttributeType__MinAssignment_9");
					put(grammarAccess.getAttributeTypeAccess().getMaxAssignment_11(), "rule__AttributeType__MaxAssignment_11");
					put(grammarAccess.getAttributeTypeAccess().getTaggerIdAssignment_12_1(), "rule__AttributeType__TaggerIdAssignment_12_1");
					put(grammarAccess.getAttributeTypeAccess().getEnumTypeAssignment_13_1(), "rule__AttributeType__EnumTypeAssignment_13_1");
					put(grammarAccess.getAttributeTypeAccess().getDescriptionAssignment_14_1(), "rule__AttributeType__DescriptionAssignment_14_1");
					put(grammarAccess.getAttributeTypeAccess().getDefaultValueAssignment_15_1(), "rule__AttributeType__DefaultValueAssignment_15_1");
					put(grammarAccess.getAttributeTypeAccess().getFileExtensionAssignment_16_1(), "rule__AttributeType__FileExtensionAssignment_16_1");
					put(grammarAccess.getOseeEnumTypeAccess().getNameAssignment_1(), "rule__OseeEnumType__NameAssignment_1");
					put(grammarAccess.getOseeEnumTypeAccess().getOverrideAssignment_2_1(), "rule__OseeEnumType__OverrideAssignment_2_1");
					put(grammarAccess.getOseeEnumTypeAccess().getTypeGuidAssignment_4(), "rule__OseeEnumType__TypeGuidAssignment_4");
					put(grammarAccess.getOseeEnumTypeAccess().getEnumEntriesAssignment_5(), "rule__OseeEnumType__EnumEntriesAssignment_5");
					put(grammarAccess.getOseeEnumEntryAccess().getNameAssignment_1(), "rule__OseeEnumEntry__NameAssignment_1");
					put(grammarAccess.getOseeEnumEntryAccess().getOrdinalAssignment_2(), "rule__OseeEnumEntry__OrdinalAssignment_2");
					put(grammarAccess.getRelationTypeAccess().getNameAssignment_1(), "rule__RelationType__NameAssignment_1");
					put(grammarAccess.getRelationTypeAccess().getOverrideAssignment_2_1(), "rule__RelationType__OverrideAssignment_2_1");
					put(grammarAccess.getRelationTypeAccess().getTypeGuidAssignment_4(), "rule__RelationType__TypeGuidAssignment_4");
					put(grammarAccess.getRelationTypeAccess().getSideANameAssignment_6(), "rule__RelationType__SideANameAssignment_6");
					put(grammarAccess.getRelationTypeAccess().getSideAArtifactTypeAssignment_8(), "rule__RelationType__SideAArtifactTypeAssignment_8");
					put(grammarAccess.getRelationTypeAccess().getSideBNameAssignment_10(), "rule__RelationType__SideBNameAssignment_10");
					put(grammarAccess.getRelationTypeAccess().getSideBArtifactTypeAssignment_12(), "rule__RelationType__SideBArtifactTypeAssignment_12");
					put(grammarAccess.getRelationTypeAccess().getDefaultOrderTypeAssignment_14(), "rule__RelationType__DefaultOrderTypeAssignment_14");
					put(grammarAccess.getRelationTypeAccess().getMultiplicityAssignment_16(), "rule__RelationType__MultiplicityAssignment_16");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.osee.framework.contentassist.antlr.internal.InternalOseeTypesParser typedParser = (org.eclipse.osee.framework.contentassist.antlr.internal.InternalOseeTypesParser) parser;
			typedParser.entryRuleOseeTypeModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public OseeTypesGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(OseeTypesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
